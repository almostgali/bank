# Generated by Django 4.2 on 2025-06-27 03:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CardInfo',
            fields=[
                ('cardID', models.CharField(max_length=19, primary_key=True, serialize=False, verbose_name='银行卡号')),
                ('openDate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='开户日期')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=18, verbose_name='账户余额')),
                ('passwd', models.CharField(max_length=6, verbose_name='密码')),
                ('IsReportLoss', models.CharField(choices=[('是', '是'), ('否', '否')], default='否', max_length=3, verbose_name='挂失状态')),
            ],
            options={
                'verbose_name': '银行卡信息',
                'verbose_name_plural': '银行卡信息',
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('savingID', models.AutoField(primary_key=True, serialize=False, verbose_name='存款编号')),
                ('savingName', models.CharField(max_length=20, verbose_name='存款类型名称')),
                ('descrip', models.CharField(blank=True, max_length=50, null=True, verbose_name='类型描述')),
            ],
            options={
                'verbose_name': '存款类型',
                'verbose_name_plural': '存款类型',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('customerID', models.CharField(max_length=12, primary_key=True, serialize=False, verbose_name='客户编号')),
                ('customerName', models.CharField(max_length=10, verbose_name='姓名')),
                ('idCard', models.CharField(max_length=18, unique=True, verbose_name='身份证号')),
                ('telephone', models.CharField(default='', max_length=11, verbose_name='联系电话')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='地址')),
            ],
            options={
                'verbose_name': '客户信息',
                'verbose_name_plural': '客户信息',
            },
        ),
        migrations.CreateModel(
            name='TradeInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tradeDate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='交易时间')),
                ('tradeType', models.CharField(choices=[('存入', '存入'), ('支取', '支取'), ('转账', '转账')], max_length=6, verbose_name='交易类型')),
                ('tradeMoney', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='交易金额')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='交易备注')),
                ('cardID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank_app.cardinfo', verbose_name='银行卡号')),
            ],
            options={
                'verbose_name': '交易记录',
                'verbose_name_plural': '交易记录',
                'ordering': ['-tradeDate'],
            },
        ),
        migrations.AddField(
            model_name='cardinfo',
            name='customerID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank_app.userinfo', verbose_name='客户编号'),
        ),
        migrations.AddField(
            model_name='cardinfo',
            name='savingID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bank_app.deposit', verbose_name='存款类型'),
        ),
        migrations.CreateModel(
            name='Bankuser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', '管理员'), ('operator', '用户')], default='operator', max_length=10, verbose_name='角色')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '银行用户',
                'verbose_name_plural': '银行用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
